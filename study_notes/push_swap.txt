push_swap

시간복잡도
	알고리즘의 수행 시간을 분석할 때 시간 복잡도를 사용
	-최선의 경우 (Best Case)
		빅 오메가 표기법 사용
		최선의 시나리오로 최소 이만한 시간이 걸림

	-최악의 경우 (Worst Case)
		빅 오 표기법 사용
		최악의 시나리오로 아무리 오래 걸려도 이 시간보다 덜 걸림

	-평균적인 경우 (Average Case)
		빅 세타 표기법 사용
		평균 시간을 나타냄

공간 복잡도(Space Complexity)
	공간 복잡도는 알고리즘에서 사용하는 메모리 양을 나타냄

스택
	가장 나중에 삽입된 자료가 가장 먼저 삭제되는 자료구조(LIFO)
	-연산
		push : 데이터 삽입
		pop  : 데이터 삭제

큐
	가장 먼저 삽입된 자료가 가장 먼저 삭제되는 자료구조 (FIFO)
	-연산
		enqueue : 데이터 삽입
		dequeue : 데이터 삭제

덱
	front rear 모두 입출력이 가능한 자료구조


exit 함수
	프로세스 종료 함수
	https://velog.io/@bokyungkim/C-exit-%ED%95%A8%EC%88%98-main%EC%97%90%EC%84%9C-return%EA%B3%BC%EC%9D%98-%EC%B0%A8%EC%9D%B4
		헤더: stdlib.h
		인자: int status (호스트 환경에게 알려줄 종료 값)
		반환: 없음

	함수 특징
		exit 함수는 정상적으로 프로세스를 종료하는 함수이다.
		종료하기 전에 모든 열려진 파일들을 자동으로 닫는다.
		출력 버퍼 속에 데이터가 있으면 그것을 쓰기 완료시킨다.
		주로 에러가 났을 때 강제 종료시키기 위해 if문 속에서 사용된다.
		exit의 입력 인자로 전달하는 status는 운영체제에 전달하며 main함수의 return값과 같은 역할이다.
		status 값은 에러 코드와 같으므로 정상 종료시 0을, 에러로 인한 종료시 0이 아닌 숫자, 대체로 1을 반환한다.

	main()에서 exit과 return의 차이
		main() 함수에서 return 하는 것 == exit(0)
		exit()은 commit과 같이 현재 C 언어로 작성된 프로세스 내 파일 입출력 중인 것을 저장함과 동시에 프로세스 종료하며 운영체제에게 권한을 넘긴다.
		return은 일반 함수 속에서 return문을 사용하면 그 함수만 종료되지만, main() 함수 속의 return문은 프로그램 전체를 중지시킨다.
		정리하면 exit() 함수는 바로 프로세스 종료
		return은 뒤 문장을 실행하며 종료

	종료 상태 코드(exit status code)
	https://velog.io/@hidaehyunlee/minishell-4.-%EC%A2%85%EB%A3%8C%EC%83%81%ED%83%9C%EC%99%80-%EC%97%90%EB%9F%AC%EB%A9%94%EC%84%B8%EC%A7%80-%EC%B2%98%EB%A6%AC
		몇몇 종료 상태 코드들은 예약되어 있기 때문에 사용자가 임의로 exit 의 매개변수로 쓰면 안 된다. 
		흔히 프로그램에서 에러 발생시 종료를 위해 exit 1을 쓰는데, 이는 다양한 형태의 에러를 나타내기 때문에 맞는 사용이기도 하지만, 
		다른 면에서 보면 에러에 대한 유용한 정보를 나타내지 않는다는 것도 의미한다.

		0	성공적으로 실행	
		1	광범위한 일반적 에러	“Operation not permitted” , "not a valid identifier", "too many arguments" 등
		2	쉘 builtin 명령어의 오사용	“No such file or directory” 등
		126	Permission 문제로 실행 불가능한 명령어의 구동	"Permission denied", "Is a directory"
		127	명령어의 경로($PATH) 문제 혹은 명령어 오타	“Command not found”, “No such file or directory”
		130	치명적 에러 발생으로 인한 종료 (Ctrl+C)	"Script terminated by Ctrl+C”
		255	exit 에 정수(0~255)가 아닌 인자 넘김	"numeric argument required"

push_swap 알고리즘 
	(모래시계 알고리즘)
	https://possible-crepe-bc7.notion.site/push_swap-ac11251f4346486fa76e3c7ff49ca803

	(더블 피벗 퀵소트 정렬 알고리즘)
	https://intrepidgeeks.com/tutorial/pushswap-complexity

push_swap 구현
	1. 스택의 연산을 구현하기 위해 필요한 자료구죠 구현 - 덱, 더블 링크드 리스트
	2. 명령행 인자 데이터 에러처리 및 데이터 파싱 구현
	3. 데이터 5개 이하의 경우에 대해서 별도의 알고리즘 적용
	4. 데이터가 오름차순, 내림차순으로 되어있는 경우 예외처리 적용
	5. 그밖에 경우에 대해서 push_swap 알고리즘 적용
	
	push_swap 흐름도
		1. 명령행 인자 데이터 에러처리 및 데이터 파싱
		2. 이미 정렬된 경우 예외처리
		3. 3개 이하의 경우 알고리즘 예외처리
		4. 5개 이하의 경우 알고리즘 예외처리
		5. 내림차순 정렬된 경우 예외처리
		6. push_swap 알고리즘 적용
		7. 스택 자료구조 메모리 해제

	05-26 : 중복 값 에러처리 오류 발생
			적절한 메모리 해제 필요
			5개 경우 정렬처리 오류 발생
			