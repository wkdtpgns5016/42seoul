pipex
	다이렉션
		https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=minki0127&logNo=220683488997
		

	파이프라인


	int access(const char *pathname, int mode)
		프로세스가 지정한 파일이 존재하는지 해당 권한이 가능한 지 확인하는 함수

		헤더 : unistd.h
		인수 : pathname : 파일이나 디렉토리
			  mode :검사할 내용
		반환 : 0  : 가능 또는 파일이 존재함
			  -1 : mode에 대하여 거절되었거나 에러가 있음. errno에 세팅됨
		mode 종류 : R_OK : 읽기
				   W_OK : 쓰기
				   X_OK : 실행
				   F_OK : 파일 존재

	int dup(int fd)
		파일 디스크럽터 복사 함수

		헤더 : unistd.h
		인수 : fd : 복사할 fd
		반환 : 새로운 fd (제일 낮은 fd 값)
			  -1 : 오류

	int dup2(int fd, int fd2)
		fd2에 fd를 복제하는 함수 (열려있으면 닫고 복제함)

		헤더 : unistd.h
		인수 : fd  : 복사할 fd
			  fd2 : 새롭게 지정할 fd
		반환 : -1 : 오류
		
	int execve(const char *filename, char *const argv[], char *const envp[])
		filename이 가리키는 파일을 실행하는 함수

		헤더 : unistd.h
		인수 : filename : 파일 경로
			  argv[] : 파일 인자의 포인터
			  envp[] : 환경변수의 포인터
		반환 : 실패시 -1 반환
		
	int fork(void)
		자식 프로세스 생성함수

		헤더 : unistd.h
		반환 : 자식 프로세스 id 반환, 자식은 0을 반환

	int pipe(int fd[2])
		https://reakwon.tistory.com/80
		https://nomad-programmer.tistory.com/110
		파이프 함수

		헤더 : unistd.h
		인수 : fd[2] : 파이프, 0은 읽기전용 1은 쓰기용 파이프
		반환 : 성공시 0, 실패시 -1 반환

	int unlink(const char *pathname)
		시스템 호출을 사용하여 파일에 대한 디렉토리 항목을 지우고 링크 개수를 감소시킴

		헤더 : unistd.h
		인수 : filename : 파일 경로
		반환 : 실패시 -1 반환

	pid_t wait(int *status)
		자식 프로세스 종료 까지 대기하는 함수
		자식 프로세스가 정상적으로 종료되었다면 status 하위 8비트에 0이 저장되고 상위 8비트에는 exit 함수의 인수가 기록
		자식 프로세스가 비정상적으로 종료되었다면 하위 8비트에 프로세스 종료 시그널 번호가 저장되고 상위 8비트에는 0이 저장

		헤더 : sys/wait.h
		인수 : status : 자식 프로세스 종료 상태가 저장됨
		반환 : 종료된 자식 프로세스의 pid, 실패시 EOF 리턴

	pid_t waitpid(pid_t pid, int *status, int options)
		특정 자식 프로세스 종료 까지 대기하는 함수

		헤더 : sys/wait.h
		인수 : pid : 자식 프로세스 id (-1을 넣게 되면, 부모나 자식 프로세스들 중 한가지라도 종료 되길 기다림)
			  status : 자식 프로세스 종료 상태가 저장됨
			  options : wait 옵션 (WNOHANG - 부모 프로세스가 기다리지 않게 해주는 옵션 / 0 - 일반 wait 함수와 동일하게 동작)
		반환 : 종료된 자식 프로세스의 pid, 실패시 EOF 리턴

		WIFEXITED(status) : 자식이 정상적으로 종료되었다면 non-zero 이다. 
		WEXITSTATUS(status) : exit()를 호출하기 위한 인자나 return 값이 설정되고 종료된 자식의 반환 코드의 최하위 8비트를 평가한다. 
		이 매크로는 정상종료 - WIFEXITED(status) - 일때만 평가된다. 
		WIFSIGNALED(status) : 자식프로세스가 어떤 신호때문에 종료되었다면 참을 반환한다. 
		WTERMSIG(status) : 자식프로세스를 종료하도록한 신호의 번호를 반환한다. 당연히 WIFSIGNALED 가 non_zero 일 경우에만 사용할수 있다. 
		WIFSTOPPED(status) : 반환의 원인이 된 자식프로세스가 현재 정지되어 있다면 참을 반환한다. 
		WSTOPSIG(status) : 자식을 정지하도록 야기한 신호의 숫자를 반환한다. 
		WIFSTOPPED가 non-zero 일경우에만 사용할수 있다.
	