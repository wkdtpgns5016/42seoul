Docker
    1-1. 개념
    내 컴퓨터에서 어떠한 애플리케이션을 만들기 위해서는 한 운영체제 안에 여러 소프트웨어를 설치해야한다. 
    예를들어,  웹 개발 시, 웹서버나 데이터베이스, 개발에 필요한 라이브러리 등등이 필요하다.
            
    이러한 소프트웨어를 설치하고 개발환경을 세팅하는데 있어 즉, 초기 개발환경을 구현 시 각각의 소프트웨어를 
    설치하고 또 각각의 소프트웨어를 연동하는 등의 시간이 많이 소요되게 된다. 누군가가 새로운 os에 소프트웨어를 
    설치하여 우리에게 제공해주고, 우리의 앱을 네트워크로 통신하여 소프트웨어들을 사용할 수 있다면 좋겠지만, 
    각 소프트웨어 별로 한대의 pc가 필요하기 때문에 비용이 많이 들게 된다. 따라서 우리는 가상머신을 사용해서 
    웹서버나 데이터베이스를 구축하게 된다. 하지만 단지 웹서버나 데이터베이스를 사용하기 위해서 os를 별도로 
    설치하는 것은 너무 비효율적이다. 

    이를 해결하기 위해 생겨난것이 도커이다. 도커는 같은 os 상에서 웹서버나 데이터베이스를 
    격리된 환경에서 실행된다. 이때 운영체제가 설치된 컴퓨터를 host라고 한다. 그리고 호스트에서 각 웹서버와 
    데이터베이스가 실행되는 격리된 환경을 컴테이너라고 한다. 각각의 컨테이너에는 운영체제 전체가 설치되어 
    있는 것이 아닌 앱을 실행하는데 있어 필요한 라이브러리들과 실행 파일들이 포함되어 있다. 한 운영체제에서 
    같이 동작하여 별도로 무엇을 설치할 필요도 없고, 속도도 느려지지 않는다.
        
    그래서 필요한 도커 이미지들을 도커 허브에서 pull하고 이것을 run하게 되면 컨테이너가 생성되게 된다. 
    프로그램을 앱 스토어에서 다운로드받고 이것을 실행하게되면 실행 프로세스가 생기는 방식과 유사하다.

    docker images 명령어를 사용하게 되면 설치한 이미지들을 나열하여 볼 수 있다.

    1-2. 컨테이너 생성 및 삭제
    docker run (—name [컨테이너 이름]) [도커이미지] 로 실행하게 되면 컨테이너가 생성된다.
    docker ps 명령어를 실행하면 실행 중인 컨테이너를 볼 수 있고, -a 옵션을 추가하면 생성한 컨테이너 전부를 보여준다.
    docker stop [컨테이너 이름] 로 실행하게 되면 컨테이너가 중지된다.
    docker rm [컨테이너 이름] 로 실행하게 되면 중지된 컨테이너가 삭제된다.
    docker rmi [이미지 이름] 로 실행하게 되면 이미지가 삭제된다.

    1-3. 컨테이너 실행
    docker exec [컨테이너] [명령어] 를 쓰게되면
    컨테이너 내부에서 해당 명령어를 실행하게 된다.
    컨테이너 내부에서 쉘모드를 실행하기 위해서는
    docker exec [컨테이너] -it /bin/bash 처럼
    -it 옵션을 통해 명령어가 종료되지 않게 설정하면 쉘모드로 컨테이너 내부로 접근 가능하다.

    --interactive , -i : Keep STDIN open even if not attached
    --tty , -t		  : Allocate a pseudo-TTY

    1-4. Network
    host 내의 특정 컨테이너에 접근하려면 컨테이너에 대한 host 포트번호로 접근하게 되면 포트포워딩 되어 해당 컨테이너의 포트로 접근할 수 있다.
    docker run —name [컨테이너 이름] -p [host 포트:컨테이너 포트] [도커 이미지] 로 실행하면
    해당 도커 이미지를 컨테이너로 생성이 되고 포트번호로 설정이 된다. 따라서 host 포트로 접근하게 되면 컨테이너 포트에 접근 할 수 있다.

    1-5. Volume
    컨테이너 내부의 저장된 파일들이 컨테이너가 삭제되면 파일이 손실되기 때문에 별도의 volume를 지정하여 외부에 파일과 컨테이너파일과 연결 할 수 있다.
    docker run —name [컨테이너 이름] -p [host 포트:컨테이너 포트] -v [외부파일경로:컨테이너파일경로] [도커 이미지] 로 실행하면
    외부 파일 경로에 있는 파일들이 컨테이너 파일 경로로 연결된다.

    1-6. Dockerfile과 build
    내 컨테이너를 이미지로 만들고 싶다면, 컨테이너를 commit 하여 이미지로 만들 수 있고, dockerfile를 만들어 이것을 build하게 되면 이미지가 만들어 진다.
    docker commit [컨테이너] [이미지이름]을 실행하면 해당 컨테이너가 이미지로 저장된다.

    commit과 build의 차이점
    commit은 기존에 내가 가지고 있는 컨테이너를 이미지로 바꾸는 명령이라면
    build는 만들고 싶은 이미지를 직접 도커파일에 작성하여 이미지를 생성한다.

    Dockerfile 문법 : https://wooono.tistory.com/123

    1-7. Docker compose
     Docker compose란, 여러 개의 컨테이너로부터 이루어진 서비스를 구축, 실행하는 순서를 자동으로 하여, 관리를 간단히하는 기능이다.
     Docker compose에서는 compose 파일을 준비하여 커맨드를 1회 실행하는 것으로, 그 파일로부터 설정을 읽어들여 모든 컨테이너 서비스를 실행시키는 것이 가능하다.

    Docker compose를 사용하기 위해서는, 크게 나눠 아래의 세 가지 순서로 이루어진다.
    1 ) 각각의 컨테이너의 Dockerfile를 작성한다(기존에 있는 이미지를 사용하는 경우는 불필요).
    2 ) docker-compose.yml를 작성하고, 각각 독립된 컨테이너의 실행 정의를 실시한다(경우에 따라는 구축 정의도 포함).
    3 ) "docker-compose up" 커맨드를 실행하여 docker-compose.yml으로 정의한 컨테이너를 개시한다.
     Docker compose는 start, stop, status, 실행 중의 컨테이너의 로그 출력, 약간의 커맨드의 실행이과 같은 기능도 가지고 있다.

    docker-compose.ym 파일에 기재되어 있는 내용은 기본적으로 docker build, docker run 커맨드 지정하는 것이 가능한 옵션이 되지만, Docker compose의 yaml 파일로써 기술하는 것으로 여러 개의 컨테이너로부터 만들어진 서비스를 조감하여 보는 것도 가능해져, 보존성의 수고를 가볍게 한다.

2023-01-12 : docker compose 작성
    1. mariadb 컴포즈 세팅
    2. wordpress 컴포즈 세팅
        1) wp-config 세팅 다시 해야함

