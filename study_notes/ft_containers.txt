이 프로젝트에서는 C++ 표준 템플릿 라이브러리의 몇 가지 컨테이너 유형을 구현합니다.
당신은 각 표준 컨테이너의 구조를 참고해야 합니다. 정교회 양식의 일부가 누락된 경우, 이 양식을 구현하지 마십시오.
C++98 표준을 준수해야 하므로 컨테이너의 이후 기능은 구현해서는 안 되지만 모든 C++98 기능(사용되지 않는 기능도 포함)이 필요합니다.

다음 컨테이너를 구현하고 Makefile과 함께 필요한 <container>.hpp 파일을 제출합니다:

• vector
벡터 <boole> 전문화를 할 필요는 없습니다.
• map
• stack
벡터 클래스를 기본 기본 컨테이너로 사용합니다. 그래도 그렇겠지
STL을 포함한 다른 컨테이너와 호환됩니다.

스택(80/100) 없이 이 과제를 통과할 수 있습니다
하지만 보너스 파트를 하려면 3가지를 구현해야 합니다
필수 컨테이너: 벡터, 맵 및 스택.

또한 다음을 구현해야 합니다:
• std::iterator_traits
• std::reverse_iterator
• std::enable_if
    네, C++11이지만 C++98 방식으로 구현할 수 있을 것입니다.
    SFINAE를 찾을 수 있도록 요청합니다.
• std::is_integral
• std::equal and/or std::lexicographical_compare
• std::pair
• std::make_pair

Requirements
• 네임스페이스는 ft여야 합니다.
• 컨테이너에 사용되는 각 내부 데이터 구조는 논리적이고 정당해야 합니다. 즉, 맵에 단순 배열을 사용하는 것은 좋지 않습니다.
• 표준 컨테이너에 제공된 것보다 더 많은 공용 기능을 구현할 수 없습니다. 다른 모든 것은 비공개이거나 보호되어야 합니다. 각각의 공공 기능이나 변수는 정당화되어야 한다.
• 표준 컨테이너의 모든 부재 기능, 비부재 기능 및 과부하가 예상됩니다.
• 원래 이름을 따라야 합니다. 세부 사항을 처리합니다.
• 컨테이너에 반복기 시스템이 있는 경우 이를 구현해야 합니다.
• std::allocator를 사용해야 합니다.
• non-member overloads를 들어 키워드 friend가 허용됩니다. friend의 각 사용은 정당화되어야 하며 평가 중에 점검될 것이다.
• 물론 std::map::value_messages의 구현에는 키워드 friend가 허용됩니다.

Testing
• 당신은 또한 당신의 방어를 위해 최소한 main.cpp의 테스트를 제공해야 한다. 예로 제시된 본론보다 더 멀리 가야 합니다!
• 동일한 테스트를 실행하는 두 개의 이진 파일을 생성해야 합니다. 하나는 컨테이너만 있는 것이고 다른 하나는 STL 컨테이너만 있는 것입니다.
• 출력과 성능/타이밍을 비교합니다(용기 속도가 최대 20배 느릴 수 있음).
• ft::<container>를 사용하여 컨테이너를 테스트합니다.

================================================================================
컨테이너
    • 시퀀스 컨테이너
        1) 동일한 유형의 유한한 객체 집합을 엄밀하게 선형 배열로 구성하는 컨테이너
        2) vector, list, deque
        3)  기본 시퀀스 종류(또는 사용자가 정의할 수 있는 다른 종류의 시퀀스)에서 
            스택이나 큐와 같은 추상적인 데이터 유형을 쉽게 구성할 수 있는 컨테이너 어댑터를 제공
    
iterator : https://cplusplus.com/reference/iterator/
    iterator
    • 반복자(iterator)란 STL 컨테이너에 저장된 요소를 반복적으로 순회하여, 각각의 요소에 대한 접근을 제공하는 객체
    • iterator 요구사항
        1) 가리키는 요소의 값에 접근할 수 있어야 합니다. 따라서 참조 연산자(*)가 정의되어야 합니다.
        2) 반복자 사이의 대입 연산, 비교 연산이 가능해야 합니다. 따라서 대입, 관계 연산자가 정의되어야 합니다.
        3) 가리키는 요소의 주변 요소로 이동할 수 있어야 합니다. 따라서 증가 연산자(++)가 정의되어야 합니다.

    iterator tag - http://www.tcpschool.com/cpp/cpp_iterator_category
    • input_iterator_tag
        입력 반복자(input iterator)는 가장 단순한 형태의 반복자로, 컨테이너로부터 값을 읽는 데 사용
        입력 반복자를 사용하면 컨테이너로부터 값을 읽을 수는 있지만, 프로그램이 그 값을 변경불가
        따라서 이 반복자는 읽기 전용 알고리즘에 사용
        입력 반복자는 증가 연산자(++)를 사용하여 순방향으로만 이동
        또한, 참조 연산자(*)를 사용하여 반복해서 요소를 참조가능

    • output_iterator_tag
        출력 반복자(output iterator)는 입력 반복자와는 반대로 컨테이너의 값을 변경하는 데 사용
        출력 반복자를 사용하면 컨테이너의 값을 변경할 수는 있지만, 프로그램에서 값을 읽을 수는 없음
        따라서 이 반복자는 쓰기 전용 알고리즘에 사용
        출력 반복자는 증가 연산자(++)를 사용하여 순방향으로만 이동
        또한, 참조 연산자(*)를 사용하여 단 한 번만 요소에 값을 쓰기 가능

    • forward_iterator_tag
        순방향 반복자는 입력 반복자와 출력 반복자의 기능을 모두 포함

    • bidirectional_iterator_tag
        양방향 반복자는 증가 연산자(++)를 사용하면 순방향으로, 감소 연산자(--)를 사용하면 역방향으로도 이동 가능

    • random_access_iterator_tag
        임의 접근 반복자는 양방향 반복자의 모든 기능을 포함
        첨자 연산자([])를 통해 임의의 요소에 접근 가능
        요소의 순서를 결정하기 위해 관계 연산자를 사용
        기존의 일반 포인터가 하는 거의 모든 일을 할 수 있음 (비교, 산술, 산술대입)

    iterator function
    • advance - 지정된 위치 수만큼 반복기를 증가
        template <class InputIterator, class Distance>
        void advance(InputIterator& InIt, Distance Off);
        매개변수
            InIt : 입력 반복기에 대해 증가하고 요구 사항을 충족해야 하는 반복기
            Off : 반복기의 차이 형식으로 변환할 수 있고 반복기의 위치를 증가시킬 횟수를 지정하는 정수 계열 형식
    • distance - 두 반복기에 의해 주소가 지정된 위치 사이의 간격의 수를 결정
        template <class InputIterator>
        typename iterator_traits<InputIterator>::difference_type distance(InputIterator first, InputIterator last);
        매개 변수
            first : 두 번째로부터의 거리를 결정해야 하는 첫 번째 반복기
            last : 첫 번째로부터의 거리를 결정해야 하는 두 번째 반복기

traits : http://egloos.zum.com/sweeper/v/3007176
    traits(특상정보) 클래스
    • 특성정보(traits) 클래스는 컴파일 도중에 어떤 주어진 타입의 정보를 얻을 수 있게 하는 객체를 지칭하는 개념
    • 특성정보는 관례적으로 아래와 같은 항목들을 충족해야 함
        1) 일반적으로 특성정보는 구조체로 구현하나, 이를 특성정보(traits) 클래스라 부른다.
        2) 특성정보는 기본제공 타입에 대해서 쓸 수 있어야 한다.

allocator : https://wikidocs.net/29955 , https://woo-dev.tistory.com/51
    Allocator
    • 유연한 메모리 관리를 위한 클래스
    • 일반적으로 표준 라이브러리의 컨테이너를 구현할때 많이 사용
    • new 연산자는 클래스가 할당과 동시에 초기화를 진행하지만 
      allocator의 멤버 함수를 이용하면 메모리의 할당은 되었지만 
      초기화 되지 않은 상태의 메모리의 시작 주소를 얻을 수 있다.
      원래 초기화되지 않은 메모리 공간에 객체를 직접 할당할 수 없다. 
      하지만 해당 클래스의 멤버 함수 또는 관련 함수가 초기화 되지 않은 공간에 
      객체를 저장할 수 있도록 한다.
    • 할당받은 메모리에 객체를 생성 후 메모리 해제(deallocate)없이 생성한 객체들을 
      소멸(destroy)시킬 수 있다. 즉 메모리의 재할당 없이 그 공간을 allocate 했던 
      초기 상태로 만들 수 있다.

    Allocator 관련 함수
    • allocate() : 초기화되지 않은 메모리 공간을 할당하여 그 시작 주소를 반환하는 함수
    • deallocate() : 메모리 공간을 해제하는 함수
    • construct() : 초기화되지 않은 공간에 요소를 저장하는 함수
    • destroy() : 객체를 소멸시키는 함수
    • uninitialized_copy() : [first, last) 범위의 요소들을 out이 가리키는 위치에 순서대로 복사
    • uninitialized_fill() : [first, last) 범위의 각 모든 요소에 val을 저장

vector : https://cplusplus.com/reference/vector/vector/
    Vector
    • 크기가 변경될 수 있는 배열을 나타내는 시퀀스 컨테이너
    • 기존 배열과의 차이점 - 벡터는 스토리지를 관리하고 효율적으로 동적으로 확장하는 기능 대신 더 많은 메모리를 사용
    • 다른 동적 시퀀스 컨테이너( deques , list 및 forward_lists )와 비교할 때 
      벡터는 요소에 접근하는 데 매우 효율적이며(배열과 마찬가지로) 요소를 끝에서 추가하거나 제거하는 데 상대적으로 효율적
    • 끝 이외의 위치에서 요소를 삽입하거나 제거하는 작업의 경우 다른 작업보다 성능이 떨어지고 
      list 및 forward_lists 보다 일관성이 떨어지는 반복자와 참조가 존재
    
    Vector 구현 사항
    • 생성자

    Vector_base 사용이유
    • https://42born2code.slack.com/archives/CU6MU5TB7/p1633424864272900