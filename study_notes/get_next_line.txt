get_next_line

get_next_line 함수 설명
    https://epicarts.tistory.com/154

gcc -Wall -Wextra -Werror -D BUFFER_SIZE=42 <파일들>.c
    1. -D[매크로]=[매크로 값] 옵션 : 소스 내에 #define [매크로] [매크로 값] 옵션을 추가

파일디스크립터(fd)
    1. 개념 : 파일 디스크립터(File Descriptor)란 리눅스 혹은 유닉스 계열의 시스템에서 프로세스(process)가 
    파일(file)을 다룰 때 사용하는 개념으로, 프로세스에서 특정 파일에 접근할 때 사용하는 추상적인 값이다. 
    파일 디스크럽터는 일반적으로 0이 아닌 정수값을 갖는다. 
    흔히 유닉스 시스템에서 모든 것을 파일이라고 한다. 일반적인 정규파일부터 디렉토리, 소켓, 파이프, 블록 디바이스, 
    케릭터 디바이스 등 모든 객체들을 파일로 관리한다. 유닉스 시스템에서 프로세스가 이 파일들을 접근할 때 
    파일 디스크립터라는 개념일 이용한다. 프로세스가 실행 중에 파일을 Open하면 커널은 해당 프로세스의 파일 디스크립터 
    숫자 중 사용하지 않는 가장 작은 값을 할당해준다. 그 다음 프로세스가 열려있는 파일에 시스템 콜을 이용해서 접근할 때, 
    파일 디스크립터(FD)값을 이용해서 파일을 지칭할 수 있다.
    프로그램이 프로세스로 메모리에서 실행될 때, 기본적으로 할당되는 파일디스크립터는 표준입력(Standard Input), 
    표준 출력(Standard Output), 표준에러(Standard Error)이며 이들에게 각각 0, 1, 2라는 정수가 할당된다.

    2. 요약 : 유닉스 시스템에서는 객체들을 모두 파일이라고 하는데, 파일에 접근할 때, 이 fd값을 이용하여 파일을 지칭함
    파일에 접근하면 커널은 fd값중 사용하지 않는 가장 작은 값을 할당함. 기본적으로 할당되는 fd값은 0 1 2 인데
    각각 표준입력, 표준출력, 표준에러임

read 함수
    헤더: unistd.h
    형태: ssize_t read (int fd, void *buf, size_t nbytes)
    인수: int fd 파일 디스크립터
    void *buf 파일을 읽어 들일 버퍼
    size_t nbytes 퍼버의 크기
    반환값: -1(실패), 양수(읽은 바이트 수)


lseek
    함수의 seek pointer (커서) 를 조정하는 함수입니다. 조정된 seek pointer 는 파일의 read/write 시 사용됩니다.
    특정 위치부터 읽거나 쓰고싶을때 유용합니다.

정적 변수
    자료형 앞에 static 키워드를 붙임
    초기화를 하지 않아도 자동으로 0이 저장됨
    반복문의 중괄호 내에서 선언 되었더라도 초기화는 한번만 수행
    정적 지역 변수의 메모리 생성 시점 중괄호 내에서 초기화 될때
    정적 지역 변수의 메모리 소멸 시점 프로그램이 종료될때

gnl 초기구현 로직
    만약에 버퍼에 저장한 문자열에서 개행이 없을경우
    1. (백업이 null이면) 그냥 백업에 저장
    2. (백업에 값 있으면) 기존꺼랑 더해서 저장

    만약에 버퍼에 저장한 문자열에서 개행이 있을경우
    1. (백업이 null이면) 개행 전까지의 문자열 반환하고, 개행 후의 문자열 백업에 저장
    2. (백업에 값 있으면) 기존꺼랑 개행 전까지 더해서 반환, 개행 후의 문자열 백업에 저장
